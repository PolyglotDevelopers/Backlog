@{
    ViewData["Title"] = Localize("BacklogPage.Title");
}
@Html.AntiForgeryToken()
<div class="card card-datatable">
    <div class="card-header">
        <h3 class="card-title"><i class="fas fa-list-ul me-2"></i>@Localize("BacklogPage.Title").Text</h3>
        <div class="card-actions">
            <a asp-action="Create" class="btn btn-primary me-2"><i class="fas fa-plus me-1"></i>@Localize("Button.AddNew").Text</a>
        </div>
    </div>
    <div class="card-body p-3">
        <table class="table table-bordered table-condensed table-striped nowrap" id="BacklogGrid"></table>
    </div>
</div>

<script>
    let taskTypeListArr = null;
    let severityListArr = null;
    let statusListArr = null;
    let assignedListArr = null;

    $(document).ready(function () {
        JSManager.setPageTitle('@Localize("BacklogPage.Title").Text');

        taskTypeListArr = JSManager.ajaxGetWithResponse('@Url.Action("GetTaskType")', {});
        severityListArr = JSManager.ajaxGetWithResponse('@Url.Action("GetSeverity")', {});
        statusListArr = JSManager.ajaxGetWithResponse('@Url.Action("GetStatus")', {});

        var table = $("#BacklogGrid").DataTable({
            processing: true,
            serverSide: true,
            stateSave: false,
            info: true,
            autoWidth: false,
            filter: false,
            lengthChange: true,
            pageLength: 10,
            searching: true,
            ordering: true,
            initComplete: function (settings, json) {
               
            },
            language: {
                search: '<span>@Localize("Grid.SearchLabel").Text</span> _INPUT_',
                searchPlaceholder: '@Localize("Grid.SearchPlaceholder").Text',
                lengthMenu: '_MENU_ @Localize("Grid.LengthChangeLabel").Text',
                paginate: { 'first': 'First', 'last': 'Last', 'next': '&rarr;', 'previous': '&larr;' },
                zeroRecords: '@Localize("Grid.ZeroRecords").Text',
                info: '@Localize("Grid.FooterInfo").Text',
                infoEmpty: '@Localize("Grid.FooterInfoWhenEmpty").Text'
            },
            ajax: {
                url: "@Url.Action("DataRead", new { projectId = 0 })",
                type: "POST",
                datatype: "json",
                data: function (dto) {
                    JSManager.addAntiForgeryToken(dto);
                }
            },
            columns: [
                {
                    sortable: false,
                    render: function (data, type, row) {
                        return renderFlag(row);
                    }
                },
                {
                    title: 'Title',
                    data: 'Title',
                    sortable: true,
                    render: function (data, type, row) {
                        return data;
                    }
                },
                {
                    title: 'Project',
                    data: 'Project',
                    sortable: true,
                    render: function (data, type, row) {
                        return JSManager.hasValue(data) ? data : '-';
                    }
                },
                {
                    title: 'Module',
                    data: 'Module',
                    sortable: true,
                    render: function (data, type, row) {
                        return JSManager.hasValue(data) ? data : '-';
                    }
                },
                {
                    title: 'SubModule',
                    data: 'SubModule',
                    sortable: true,
                    render: function (data, type, row) {
                        return JSManager.hasValue(data) ? data : '-';
                    }
                },
                {
                    title: 'Assigned To',
                    data: 'Assignee',
                    sortable: true,
                    render: function (data, type, row) {
                        return JSManager.hasValue(data) ? data : '-';
                    }
                },
                {
                    title: 'DueDate',
                    data: 'DueDate',
                    sortable: true,
                    render: function (data, type, row) {
                        return renderDatePicker(row);
                    }
                },
                {
                    title: 'Type',
                    data: 'TaskType',
                    sortable: true,
                    render: function (data, type, row) {
                        return renderSelect(row, 1, data.Id);
                    }
                },
                {
                    title: 'Severity',
                    data: 'Severity',
                    sortable: true,
                    render: function (data, type, row) {
                        return renderSelect(row, 2, data.Id);
                    }
                },
                {
                    title: 'Status',
                    data: 'Status',
                    sortable: true,
                    render: function (data, type, row) {
                        return renderSelect(row, 3, data.Id);
                    }
                }]
        });
        $('#BacklogGrid').on('draw.dt', function (e, settings, len) {
            bindSelectEvent();
            $('.datepicker-td').datepicker({
                format: "dd-M-yyyy",
                viewMode: "date",
                autoclose: true,
                todayHighlight: true
            });
        });
        $("#BacklogGrid").closest('div').addClass("table-responsive");
    });

    function renderFlag(row) {
        let title = row.Title;

        let taskTypeHtml = '';
        let taskTypeName = row.TaskType.Name;
        let taskTypeTextColor = row.TaskType.TextColor;
        let taskTypeBgColor = row.TaskType.BackgroundColor;
        let taskTypeIconClass = row.TaskType.IconClass;
        let taskTypeStyle = '';
        let taskTypeIcon = '';

        let statusHtml = '';
        let statusName = row.Status.Name;
        let statusTextColor = row.Status.TextColor;
        let statusBgColor = row.Status.BackgroundColor;
        let statusIconClass = row.Status.IconClass;
        let statusStyle = '';
        let statusIcon = '';

        let severityHtml = '';
        let severityName = row.Severity.Name;
        let severityTextColor = row.Severity.TextColor;
        let severityBgColor = row.Severity.BackgroundColor;
        let severityIconClass = row.Severity.IconClass;
        let severityStyle = '';
        let severityIcon = '';


        if (JSManager.hasValue(taskTypeTextColor)) {
            taskTypeStyle += `color:${taskTypeTextColor};`;
        }
        if (JSManager.hasValue(taskTypeBgColor)) {
            taskTypeStyle += `background:${taskTypeBgColor};`;
        }
        if (JSManager.hasValue(taskTypeIconClass)) {
            taskTypeIcon += `<i class="${taskTypeIconClass}"></i>`;
        }

        if (JSManager.hasValue(statusTextColor)) {
            statusStyle += `color:${statusTextColor};`;
        }
        if (JSManager.hasValue(statusBgColor)) {
            statusStyle += `background:${statusBgColor};`;
        }
        if (JSManager.hasValue(statusIconClass)) {
            statusIcon += `<i class="${statusIconClass}"></i>`;
        }

        if (JSManager.hasValue(severityTextColor)) {
            severityStyle += `color:${severityTextColor};`;
        }
        if (JSManager.hasValue(severityBgColor)) {
            severityStyle += `background:${severityBgColor};`;
        }
        if (JSManager.hasValue(severityIconClass)) {
            severityIcon += `<i class="${severityIconClass}"></i>`;
        }

        taskTypeHtml = `<span class="badge-status" style="${taskTypeStyle}" title="${taskTypeName}">${taskTypeIcon}</span>`;
        statusHtml = `<span class="badge-status" style="${statusStyle}" title="${statusName}">${statusIcon}</span>`;
        severityHtml = `<span class="badge-status" style="${severityStyle}" title="${severityName}">${severityIcon}</span>`;

        return `${taskTypeHtml} ${statusHtml} ${severityHtml}`;
    }

    function bindSelectEvent() {
        $('.dynamic-ddl').change(function () {
            let selectedValue = $(this).val();
            let id = $(this).find(':selected').data('id');
            let type = $(this).find(':selected').data('type');

            alert(type)
        }).select2();
    }

    function renderSelect(row, type, val) {
        debugger
        let id = row.Id;
        let html = '';
        let data = null;

        switch (type) {
            case 1:
                data = taskTypeListArr;
                break;
            case 2:
                data = severityListArr;
                break;
            case 3:
                data = statusListArr;
                break;
        }

        html += '<select class="form-control form-control-sm dynamic-ddl">';
        $.each(data, function (key, obj) {
            if (parseInt(obj.Value) === val)
                html += `<option data-id="${id}" data-type="${type}" value="${obj.Value}" selected>${obj.Text}</option>`;
            else
                html += `<option data-id="${id}" data-type="${type}" value="${obj.Value}">${obj.Text}</option>`;
        });
        html += '<select>';

        return html;
    }

    function renderDatePicker(row) {
        let id = row.Id;
        let html = '';
        let data = row['DueDate'];
        if (JSManager.hasValue(data))
            data = moment(data).format('DD-MMM-YYYY');
        else
            data = '';

        html += `<input type="text" class="form-control datepicker-td" data-id="${id}" value="${data}" />`;

        return html;
    }
</script>