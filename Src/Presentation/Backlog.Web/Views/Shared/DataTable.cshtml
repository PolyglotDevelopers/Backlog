@using System.Text
@model DataTableModel
@Html.AntiForgeryToken()
@{
    var sbActions = new StringBuilder();
    var sbButtons = new StringBuilder();
    var btnClassArr = new[] { "btn-primary", "btn-secondary", "btn-success", "btn-danger", "btn-info", "btn-warning", "btn-light", "btn-dark", "btn-outline-primary", "btn-outline-secondary", "btn-outline-success", "btn-outline-danger", "btn-outline-info", "btn-outline-warning", "btn-outline-light", "btn-outline-dark" };
    var gridName = !string.IsNullOrEmpty(Model.Name) ? Model.Name : "grid";
    var headerJson = Json.Serialize(Model.HeaderActions);
    var filterParameters = Json.Serialize(Model.FilterParameters);
}
@if (!Model.RenderOnlyTable)
{    
    if (Model.HeaderActions.Any())
    {
        foreach (var action in Model.HeaderActions)
        {
            var btnClass = btnClassArr[action.ButtonColor.ToInt()];

            if (!string.IsNullOrEmpty(action.Url))
            {
                var url = action.Url;
                if (action.NavigationType != NavigationTypeEnum.STANDARD)
                {
                    url = $"javascript:JSManager.openOffCanvas('{url}','{Model.Title}');";
                }
                if (action.HyperLinkType == HyperLinkTypeEnum.BUTTON_ICON)
                {
                    sbButtons.Append($"<a id=\"{action.Id}\" href=\"{url}\" class=\"btn {btnClass} me-2\"><i class=\"{action.Icon} me-1\"></i></a>");
                }
                else if (action.HyperLinkType == HyperLinkTypeEnum.BUTTON_TEXT)
                {
                    sbButtons.Append($"<a id=\"{action.Id}\" href=\"{url}\" class=\"btn {btnClass} me-2\">{action.Text}</a>");
                }
                else if (action.HyperLinkType == HyperLinkTypeEnum.BUTTON_TEXT_ICON)
                {
                    sbButtons.Append($"<a id=\"{action.Id}\" href=\"{url}\" class=\"btn {btnClass} me-2\"><i class=\"{action.Icon} me-1\"></i>{action.Text}</a>");
                }
                else if (action.HyperLinkType == HyperLinkTypeEnum.HYPERLINK_TEXT)
                {
                    sbButtons.Append($"<a href=\"{url}\" class=\"me-2\">{action.Text}</a>");
                }
                else if (action.HyperLinkType == HyperLinkTypeEnum.HYPERLINK_ICON)
                {
                    sbButtons.Append($"<a id=\"{action.Id}\" href=\"{url}\" class=\"me-2\"><i class=\"{action.Icon} me-1\"></i></a>");
                }
                else if (action.HyperLinkType == HyperLinkTypeEnum.HYPERLINK_TEXT_ICON)
                {
                    sbButtons.Append($"<a id=\"{action.Id}\" href=\"{url}\" class=\"me-2\"><i class=\"{action.Icon} me-1\"></i>{action.Text}</a>");
                }
                else
                {
                    sbButtons.Append($"<a id=\"{action.Id}\" href=\"{url}\" class=\"me-2\">{action.Text}</a>");
                }
            }
        }
    }
    <div class="card card-datatable">
        <div class="card-header">
            <h3 class="card-title"><i class="fas fa-list-ul me-2"></i>@Model.Title</h3>
            <div class="card-actions">
                @Html.Raw(sbButtons.ToString())
            </div>
        </div>
        <div class="card-body p-2 pt-0">
            <table class="table table-bordered table-condensed table-striped nowrap" id="@gridName"></table>
        </div>
    </div>
}
else
{
    <table class="table table-bordered table-striped table-sm" id="@gridName"></table>
}
<script>
    $(document).ready(function () {
        JSManager.setPageTitle('@Model.Title');
        var table = $("#@gridName").DataTable({
            processing: true,
            serverSide: @Model.ServerSide.ToString().ToLower(),
            stateSave: false,
            info: true,
            autoWidth: false,
            filter: false,
            lengthChange: @Model.LengthChange.ToString().ToLower(),
            pageLength: 10,
            searching: @Model.Searching.ToString().ToLower(),
            ordering: @Model.Sorting.ToString().ToLower(),
            initComplete: function (settings, json) {
                var jsonArr = JSON.parse('@Html.Raw(headerJson)');
                for (var i = 0; i < jsonArr.length; i++) {
                    var obj = jsonArr[i];
                    if (!JSManager.hasValue(obj.HideReferenceParameter) || json.data.length <= 0)
                        continue;
                    var refValue = json.data[0][obj.HideReferenceParameter];
                    if (parseInt(refValue) === 0) {
                        $('#' + obj.Id).remove();
                    }
                }

                $('.btn-hidden').each(function () {
                    $(this).removeClass('btn-hidden');
                });

                $('[data-toggle="popover"]').popover();
            },
            language: {
                search: '<span>@Localize("Grid.SearchLabel").Text</span> _INPUT_',
                searchPlaceholder: '@Localize("Grid.SearchPlaceholder").Text',
                lengthMenu: '_MENU_ @Localize("Grid.LengthChangeLabel").Text',
                paginate: { 'first': 'First', 'last': 'Last', 'next': '&rarr;', 'previous': '&larr;' },
                zeroRecords: '@Localize("Grid.ZeroRecords").Text',
                info: '@Localize("Grid.FooterInfo").Text',
                infoEmpty: '@Localize("Grid.FooterInfoWhenEmpty").Text'
            },
            ajax: {
                url: "@Model.UrlRead",
                type: "POST",
                datatype: "json",
                data: function (dto) {
                    var filterParameters = '@Model.FilterParameters';
                    if (JSManager.hasValue(filterParameters)) {
                        var parameters = JSON.parse('@Html.Raw(filterParameters)');
                        for (var i = 0; i < parameters.length; i++) {
                            var parm = parameters[i];
                            dto[parm.Parameter] = $('#' + parm.Element).val();
                        }
                    }
                    JSManager.addAntiForgeryToken(dto);
                }
            },
            columns: [                
                @foreach (var column in Model.Columns)
                {
                    if (column.Conditions.Any())
                    {
                        @Html.Raw($"{{title:'{column.Title}',sortable: {column.Sorting.ToString().ToLower()},data: '{column.DataColumn}',render: function(data, type, row) {{return DataTable.RenderCondition(data,{Html.Raw(Json.Serialize(column.Conditions))},{column.Capitalize.ToString().ToLower()},{column.MaxLength},{column.IsDate.ToString().ToLower()},{column.IsRating.ToString().ToLower()},{column.IsColor.ToString().ToLower()},{column.IsIconClass.ToString().ToLower()});}}}},")
                    }
                    else
                    {
                        @Html.Raw($"{{title:'{column.Title}',sortable: {column.Sorting.ToString().ToLower()},data:'{column.DataColumn}',render: function(data, type, row) {{return DataTable.RenderText(data,{column.Capitalize.ToString().ToLower()},{column.MaxLength},{column.IsDate.ToString().ToLower()},{column.IsRating.ToString().ToLower()},{column.IsColor.ToString().ToLower()},{column.IsIconClass.ToString().ToLower()});}}}},")
                    }
                }

                @if (Model.ColumnActions.Any())
                {
                    @Html.Raw($"{{title:'Actions',sortable: false,render: function(data, type, row) {{return DataTable.RenderActions(row,{Html.Raw(Json.Serialize(Model.ColumnActions))});}}}}")
                }
            ]
        });
        $('#@gridName').on('draw.dt', function (e, settings, len) {
            //
        });
        $("#@gridName").closest('div').addClass("table-responsive");
    });
</script>